from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from transformers import pipeline
import logging

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
motivational_generator = pipeline("text-generation", model="gpt2")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìù –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏", callback_data="start_test")],
                [InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é", callback_data="start_meditation")],
                [InlineKeyboardButton("‚ú® –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é", callback_data="get_motivation")],
                [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º", callback_data="share_mood")],
                [InlineKeyboardButton("ü§ù –°–≤—è–∑–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º", callback_data="contact_support")]]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! ‚ú®\n\n–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è —Ç–µ–±—è —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "‚û°Ô∏è –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏\n"
        "‚û°Ô∏è –ù–∞—á–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é\n"
        "‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã\n"
        "‚û°Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ!",
        reply_markup=reply_markup
    )

# –¢–µ—Å—Ç –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏
async def start_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['test_score'] = 0
    context.user_data['test_question'] = 0
    await ask_next_question(update, context)

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞
questions = [
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —Ñ–æ–∫—É—Å–∏—Ä—É–µ—à—å—Å—è –Ω–∞ –Ω–∞—Å—Ç–æ—è—â–µ–º –º–æ–º–µ–Ω—Ç–µ?",
    "–¢—ã –æ—Å–æ–∑–Ω–∞–µ—à—å —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
    "–õ–µ–≥–∫–æ –ª–∏ —Ç–µ–±–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –º—ã—Å–ª–µ–π?",
    "–ß–∞—Å—Ç–æ –ª–∏ —Ç—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—à—å —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥—É?",
    "–¢—ã –æ—â—É—â–∞–µ—à—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –≤–µ—â–∏ –≤ –∂–∏–∑–Ω–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã —É–¥–µ–ª—è–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–≤–æ–µ–º—É –¥—ã—Ö–∞–Ω–∏—é?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–≤—è–∑—å —Å –ª—é–¥—å–º–∏ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è?",
    "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π?",
    "–¢—ã –ª–µ–≥–∫–æ –ø—Ä–æ—â–∞–µ—à—å —Å–µ–±—è –∑–∞ –æ—à–∏–±–∫–∏?",
    "–¢—ã —Ä–µ–≥—É–ª—è—Ä–Ω–æ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—à—å –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –æ—Ç–¥—ã—Ö–∞?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –º–æ–º–µ–Ω—Ç–µ, –∞ –Ω–µ –¥—É–º–∞–µ—à—å –æ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –±—É–¥—É—â–µ–º?",
    "–¢—ã –æ—Å–æ–∑–Ω–∞–µ—à—å —Å–≤–æ–∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –æ—â—É—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –æ—â—É—â–∞–µ—à—å —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –ø—Ä–æ—Å—Ç—ã—Ö –≤–µ—â–µ–π?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –≤ –∂–∏–∑–Ω–∏ –º–Ω–æ–≥–æ –¥–µ–ª?",
    "–¢—ã —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ?",
    "–¢—ã –∑–∞–º–µ—á–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–π —É–º –Ω–∞—á–∏–Ω–∞–µ—Ç –±–ª—É–∂–¥–∞—Ç—å?",
    "–¢—ã —É–º–µ–µ—à—å —Ä–∞—Å—Å–ª–∞–±–ª—è—Ç—å—Å—è, –Ω–µ –¥—É–º–∞—è –æ –≤–Ω–µ—à–Ω–∏—Ö —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—è—Ö?",
    "–¢—ã –æ—Å–æ–∑–Ω–∞–µ—à—å —Å–≤–æ–∏ –º—ã—Å–ª–∏, –∫–æ–≥–¥–∞ –æ–Ω–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –±—ã—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º–∏?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ?",
    "–¢—ã –º–æ–∂–µ—à—å —Å–ø–æ–∫–æ–π–Ω–æ —Å–∏–¥–µ—Ç—å –≤ —Ç–∏—à–∏–Ω–µ –∏ –Ω–∏ –æ —á–µ–º –Ω–µ –¥—É–º–∞—Ç—å?",
    "–¢—ã –æ—Å–æ–∑–Ω–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ —Å–ª–æ–≤–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–≤–æ–∏–º —Ü–µ–Ω–Ω–æ—Å—Ç—è–º?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∑–∞ —Ç–æ, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å?",
    "–¢—ã —á–∞—Å—Ç–æ –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–≤–æ–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏?",
    "–¢—ã —É–º–µ–µ—à—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–ø–æ–∫–æ–π–Ω—ã–º –≤ —Ç—Ä—É–¥–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–≤—è–∑—å —Å –ø—Ä–∏—Ä–æ–¥–æ–π?",
    "–¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –∏ –º—ã—Å–ª–∏ ‚Äî —ç—Ç–æ –Ω–µ —Ç—ã?",
    "–¢—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–∏–≤—ã—á–∫–∞–º–∏?",
    "–¢—ã –∑–Ω–∞–µ—à—å, –∫–∞–∫ –ø–æ–º–æ—á—å —Å–µ–±–µ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å —Å–∏–ª—å–Ω—ã–º–∏ —ç–º–æ—Ü–∏—è–º–∏?",
    "–¢—ã —á–∞—Å—Ç–æ —Ä–∞–∑–º—ã—à–ª—è–µ—à—å –æ —Å–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏?",
    "–¢—ã –∑–∞–º–µ—á–∞–µ—à—å, –∫–æ–≥–¥–∞ —Ç–≤–æ–∏ —ç–º–æ—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞—Ö–ª–µ—Å—Ç—ã–≤–∞—Ç—å —Ç–µ–±—è?"
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
answers = [
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üåü", "–ò–Ω–æ–≥–¥–∞ ‚è≥", "–†–µ–¥–∫–æ üï∞Ô∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ ‚ú®", "–ò–Ω–æ–≥–¥–∞ ü§î", "–†–µ–¥–∫–æ üòî"],
    ["–î–∞, –ª–µ–≥–∫–æ üí™", "–ò–Ω–æ–≥–¥–∞ üôÉ", "–¢—Ä—É–¥–Ω–æ üò¢"],
    ["–ß–∞—Å—Ç–æ üò∞", "–ò–Ω–æ–≥–¥–∞ üòü", "–†–µ–¥–∫–æ üòå"],
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üíñ", "–ò–Ω–æ–≥–¥–∞ üí¨", "–†–µ–¥–∫–æ üåö"],
    ["–ß–∞—Å—Ç–æ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ üß†", "–†–µ–¥–∫–æ ‚è≥"],
    ["–î–∞, —á—É–≤—Å—Ç–≤—É—é —Å–≤—è–∑—å ü§ù", "–ò–Ω–æ–≥–¥–∞ üåç", "–ù–µ—Ç, —Ä–µ–¥–∫–æ üòî"],
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üß†", "–ò–Ω–æ–≥–¥–∞ üí¨", "–†–µ–¥–∫–æ üåø"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ ‚ú®", "–ò–Ω–æ–≥–¥–∞ üï∞Ô∏è", "–†–µ–¥–∫–æ üõãÔ∏è"],
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üòå", "–ò–Ω–æ–≥–¥–∞ üï∞Ô∏è", "–†–µ–¥–∫–æ üõë"],
    ["–ß–∞—Å—Ç–æ ‚è≥", "–ò–Ω–æ–≥–¥–∞ ü§î", "–†–µ–¥–∫–æ üï∞Ô∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ ü§î", "–†–µ–¥–∫–æ ‚è≥"],
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚ú®", "–ò–Ω–æ–≥–¥–∞ üåü", "–†–µ–¥–∫–æ üò∂"],
    ["–î–∞, —è —á–∞—Å—Ç–æ üòä", "–ò–Ω–æ–≥–¥–∞ üí¨", "–†–µ–¥–∫–æ üåü"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üïäÔ∏è", "–ò–Ω–æ–≥–¥–∞ ü§Ø", "–†–µ–¥–∫–æ üßò‚Äç‚ôÇÔ∏è"],
    ["–î–∞, —á–∞—Å—Ç–æ ‚è≥", "–ò–Ω–æ–≥–¥–∞ üß†", "–†–µ–¥–∫–æ üòû"],
    ["–ß–∞—Å—Ç–æ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ ‚è≥", "–†–µ–¥–∫–æ üï∞Ô∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ ‚ú®", "–ò–Ω–æ–≥–¥–∞ ü§î", "–†–µ–¥–∫–æ üòî"],
    ["–ß–∞—Å—Ç–æ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ üß†", "–†–µ–¥–∫–æ üòî"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üåü", "–ò–Ω–æ–≥–¥–∞ üí¨", "–†–µ–¥–∫–æ ‚è≥"],
    ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å üíñ", "–ò–Ω–æ–≥–¥–∞ ‚è≥", "–†–µ–¥–∫–æ üï∞Ô∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ ‚ú®", "–ò–Ω–æ–≥–¥–∞ üïäÔ∏è", "–†–µ–¥–∫–æ üò¥"],
    ["–ß–∞—Å—Ç–æ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ üï∞Ô∏è", "–†–µ–¥–∫–æ üõë"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üí™", "–ò–Ω–æ–≥–¥–∞ üòå", "–†–µ–¥–∫–æ üßò‚Äç‚ôÇÔ∏è"],
    ["–ß–∞—Å—Ç–æ üåø", "–ò–Ω–æ–≥–¥–∞ ‚è≥", "–†–µ–¥–∫–æ üßò‚Äç‚ôÇÔ∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üåü", "–ò–Ω–æ–≥–¥–∞ ü§î", "–†–µ–¥–∫–æ üï∞Ô∏è"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ üå±", "–†–µ–¥–∫–æ üß†"],
    ["–ß–∞—Å—Ç–æ üßò‚Äç‚ôÇÔ∏è", "–ò–Ω–æ–≥–¥–∞ üòå", "–†–µ–¥–∫–æ ‚è≥"],
    ["–î–∞, –≤—Å–µ–≥–¥–∞ ‚ú®", "–ò–Ω–æ–≥–¥–∞ ü§Ø", "–†–µ–¥–∫–æ üßò‚Äç‚ôÇÔ∏è"],
    ["–ß–∞—Å—Ç–æ üí™", "–ò–Ω–æ–≥–¥–∞ üß†", "–†–µ–¥–∫–æ ‚è≥"],
]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ç–µ—Å—Ç–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def ask_next_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_index = context.user_data['test_question']
    if question_index < len(questions):
        question = questions[question_index]
        options = answers[question_index]
        keyboard = [[InlineKeyboardButton(option, callback_data=f"answer_{i}") for i, option in enumerate(options)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text(question, reply_markup=reply_markup)
        context.user_data['test_question'] += 1
    else:
        score = context.user_data['test_score']
        result = analyze_test_result(score)
        await update.callback_query.message.reply_text(f"–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –±–∞–ª–ª–æ–≤. {result}")

def analyze_test_result(score):
    if score >= 30:
        return "üåü –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    elif 20 <= score < 30:
        return "üí™ –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –ï—Å—Ç—å –∫—É–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è!"
    else:
        return "‚ù§Ô∏è –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π —É–¥–µ–ª–∏—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º."

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    answer_index = int(query.data.split("_")[1])
    context.user_data['test_score'] += answer_index + 1
    await ask_next_question(update, context)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏
async def get_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    generated = motivational_generator("Motivational quote: ", max_length=50, num_return_sequences=1)[0]['generated_text']
    await update.callback_query.message.reply_text(f"‚ú® {generated}")

# –ú–µ–¥–∏—Ç–∞—Ü–∏—è
async def start_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–ö–æ—Ä–æ—Ç–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è (5 –º–∏–Ω—É—Ç)", callback_data=    "short_meditation")],
                [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è (10 –º–∏–Ω—É—Ç)", callback_data="medium_meditation")],
                [InlineKeyboardButton("–î–ª–∏—Ç–µ–ª—å–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è (20 –º–∏–Ω—É—Ç)", callback_data="long_meditation")],
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_meditation")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏–∏:", reply_markup=reply_markup)

# –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def meditation_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    meditation_type = query.data.split("_")[0]
    
    if meditation_type == "short_meditation":
        meditation_time = 5
    elif meditation_type == "medium_meditation":
        meditation_time = 10
    elif meditation_type == "long_meditation":
        meditation_time = 20
    else:
        await query.message.reply_text("–ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    await query.message.reply_text(f"–ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—é –Ω–∞ {meditation_time} –º–∏–Ω—É—Ç. –£—Å—Ç—Ä–æ–π—Å—è –ø–æ—É–¥–æ–±–Ω–µ–µ –∏ —Ä–∞—Å—Å–ª–∞–±—å—Å—è.\n"
                                  f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏.
    await asyncio.
    sleep(10)  # –°–∏–º—É–ª—è—Ü–∏—è –Ω–∞—á–∞–ª–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω—É—é –º—É–∑—ã–∫—É/—Ç–µ–∫—Å—Ç)
    await query.message.reply_text(f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è –Ω–∞ {meditation_time} –º–∏–Ω—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üå∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def share_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üòä –°—á–∞—Å—Ç–ª–∏–≤", callback_data="mood_happy")],
                [InlineKeyboardButton("üòå –°–ø–æ–∫–æ–µ–Ω", callback_data="mood_calm")],
                [InlineKeyboardButton("üòî –ì—Ä—É—â—É", callback_data="mood_sad")],
                [InlineKeyboardButton("ü§î –ó–∞–¥—É–º–∞–ª—Å—è", callback_data="mood_thoughtful")],
                [InlineKeyboardButton("üò¥ –£—Å—Ç–∞–ª", callback_data="mood_tired")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
async def handle_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    mood = query.data.split("_")[1]
    
    if mood == "happy":
        response = "–†–∞–¥–æ—Å—Ç—å –Ω–∞–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ä–¥—Ü–µ! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –±—É–¥–µ—Ç —è—Ä–∫–∏–º! üåü"
    elif mood == "calm":
        response = "–¢–≤–æ—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≥–∞—Ä–º–æ–Ω–∏—è —Å–∏—è–µ—Ç! –ü—É—Å—Ç—å —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –ø—Ä–∏–Ω–µ—Å–µ—Ç —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ. üïäÔ∏è"
    elif mood == "sad":
        response = "–ü–µ—á–∞–ª—å ‚Äî —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ. –†–∞—Å—Å–ª–∞–±—å—Å—è –∏ –ø–æ–∑–≤–æ–ª—å —ç–º–æ—Ü–∏—è–º –ø—Ä–æ–π—Ç–∏. üå±"
    elif mood == "thoughtful":
        response = "–ò–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –∑–∞–¥—É–º–∞—Ç—å—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –º–∏—Ä —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã. üß†"
    else:  # tired
        response = "–û—Ç–¥—ã—Ö–∞–π –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å–∏–ª—ã, –æ–Ω–∏ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è. üåô"
    
    await query.message.reply_text(response)

# –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
async def contact_support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–∞–ø–∏—à–∏ –Ω–∞–º –∑–¥–µ—Å—å!\n"
                                                  "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å! üí¨")

# –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def cancel_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.message.reply_text("–ú–µ–¥–∏—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("YOUR_BOT_API_TOKEN").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    application.add_handler(CallbackQueryHandler(start_test, pattern="start_test"))
    application.add_handler(CallbackQueryHandler(start_meditation, pattern="start_meditation"))
    application.add_handler(CallbackQueryHandler(get_motivation, pattern="get_motivation"))
    application.add_handler(CallbackQueryHandler(share_mood, pattern="share_mood"))
    application.add_handler(CallbackQueryHandler(contact_support, pattern="contact_support"))
    application.add_handler(CallbackQueryHandler(meditation_selection, pattern="short_meditation|medium_meditation|long_meditation"))
    application.add_handler(CallbackQueryHandler(handle_answer, pattern="answer_\\d+"))
    application.add_handler(CallbackQueryHandler(handle_mood, pattern="mood_\\w+"))
    application.add_handler(CallbackQueryHandler(cancel_meditation, pattern="cancel_meditation"))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if name == "__main__":
    main()
