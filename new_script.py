"""
AI Assistant Bot for Mindfulness and Productivity.

This module provides a chatbot that helps users with mindfulness and productivity tasks.
The bot can generate motivational quotes, help with journaling, and provide mindfulness tips.
"""

import logging
import asyncio
import nest_asyncio
import sqlite3
import json
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, Bot
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from transformers import pipeline, GPT2LMHeadModel, GPT2Tokenizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞ –∏ –º–æ–¥–µ–ª–∏
logger.info("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∏ –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
try:
    tokenizer = GPT2Tokenizer.from_pretrained("sberbank-ai/rugpt3small_based_on_gpt2")
    model = GPT2LMHeadModel.from_pretrained("sberbank-ai/rugpt3small_based_on_gpt2")
    text_generator = pipeline(
        "text-generation", model=model, tokenizer=tokenizer, truncation=True, framework='pt', device=0
    )
    logger.info("–ú–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
except Exception as e:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞: %s", e, exc_info=True)

def generate_text(prompt):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞.

    Args:
        prompt (str): –í—Ö–æ–¥–Ω–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.

    Returns:
        str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
    """
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: %s", prompt)
    try:
        generated = text_generator(
            prompt, max_length=50, num_return_sequences=1, pad_token_id=tokenizer.eos_token_id
        )[0]['generated_text']
        logger.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: %s", generated)
        return generated
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '%s': %s", prompt, e, exc_info=True)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞."

def create_db():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.")
    try:
        conn = sqlite3.connect('bot_data.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            language TEXT,
            journal TEXT,
            self_assessment TEXT
        )''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except sqlite3.Error as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite: %s", e, exc_info=True)

def save_user_data(user_id, data):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        data (dict): –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute(
        'REPLACE INTO users (user_id, language, journal, self_assessment) VALUES (?, ?, ?, ?)',
        (user_id, data.get('language'), json.dumps(data.get('journal', [])), json.dumps(data.get('self_assessment', {})))
    )
    conn.commit()
    conn.close()

def load_user_data(user_id):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    Args:
        user_id (int): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        dict: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    conn = sqlite3.connect('bot_data.db')
    c = conn.cursor()
    c.execute('SELECT language, journal, self_assessment FROM users WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    if row:
        return {
            'language': row[0],
            'journal': json.loads(row[1]),
            'self_assessment': json.loads(row[2]) if row[2] else {}
        }
    return {'language': 'uk', 'journal': [], 'self_assessment': {}}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è start()")
    language_buttons = [
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="set_language_uk")],
        [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="set_language_ru")],
        [InlineKeyboardButton("English", callback_data="set_language_en")]
    ]
    reply_markup = InlineKeyboardMarkup(language_buttons)
    welcome_message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ß—ñ–ª–õ–∞–π—Ñ'! üåü\n\n"
        "–Ø –≤–∞—à AI-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–∏—Ä, "
        "–ø–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Please choose your language / –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:"
    )
    await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ start()")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /start /menu")
async def set_language_uk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    user_id = update.callback_query.from_user.id
    data = load_user_data(user_id)
    data['language'] = 'uk'
    save_user_data(user_id, data)
    await update.callback_query.message.reply_text("–ú–æ–≤—É –≤–∏–±—Ä–∞–Ω–æ: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶")
    await menu(update, context)

async def set_language_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    user_id = update.callback_query.from_user.id
    data = load_user_data(user_id)
    data['language'] = 'ru'
    save_user_data(user_id, data)
    await update.callback_query.message.reply_text("–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: –†—É—Å—Å–∫–∏–π üá∑üá∫")
    await menu(update, context)

async def set_language_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    user_id = update.callback_query.from_user.id
    data = load_user_data(user_id)
    data['language'] = 'en'
    save_user_data(user_id, data)
    await update.callback_query.message.reply_text("Language selected: English üá¨üáß")
    await menu(update, context)

async def mindfulness_path(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é "–ü—É—Ç—å –∫ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏".

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è mindfulness_path()")
    keyboard = [
        [InlineKeyboardButton("üß† –û—Ü–µ–Ω–∫–∞ –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ú–∏—Ä–∞", callback_data="self_assessment")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="my_results")],
        [InlineKeyboardButton("üåø –°–æ–≤–µ—Ç—ã –ø–æ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏", callback_data="mindfulness_tips")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–ü—É—Ç—å –∫ –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ mindfulness_path()")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è menu()")
    user_id = update.callback_query.from_user.id
    data = load_user_data(user_id)
    language = data.get('language', 'uk')
    keyboard = []

    # –î–ª—è —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    if language == 'uk':
        keyboard = [
            [InlineKeyboardButton("üìù –®–ª—è—Ö –¥–æ –æ—Å–æ–∑–Ω–∞–Ω–æ—Å—Ç—ñ", callback_data="mindfulness_path")],
            [InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞ –≥–∞—Ä–º–æ–Ω—ñ—è", callback_data="meditation")],
            [InlineKeyboardButton("‚ú® –Ü—Å–∫—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—ó", callback_data="get_motivation")],
            [InlineKeyboardButton("üìì –©–æ–¥–µ–Ω–Ω–∏–∫ –¥—É–º–æ–∫", callback_data="start_journal")],
            [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", callback_data="productivity_checklist")],
            [InlineKeyboardButton("üéÆ –†–æ–∑–≤–∞–∂–∞–ª—å–Ω—ñ —ñ–≥—Ä–∏", callback_data="mini_games")],
            [InlineKeyboardButton("üåû –î–µ–Ω–Ω—ñ —Ç–∞ –Ω—ñ—á–Ω—ñ —Ä–∏—Ç—É–∞–ª–∏", callback_data="rituals")],
            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–∞—Å—Ç—Ä–æ—î–º", callback_data="share_mood")],
            [InlineKeyboardButton("üí° –ü–æ—Ä–∞–¥–∏ —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞—Å—Ç—Ä–æ—é", callback_data="improve_mood")],
            [InlineKeyboardButton("üîÑ –û—Å–æ–±–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ–ª—å", callback_data="personal_profile")],
            [InlineKeyboardButton("üåü –©–æ–¥–µ–Ω–Ω—ñ –≤–∏–∫–ª–∏–∫–∏", callback_data="daily_challenges")],
            [InlineKeyboardButton("üë• –°–ø—ñ–ª—å–Ω–æ—Ç–∞", callback_data="community")],
            [InlineKeyboardButton("üá∫üá¶ –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É", callback_data="start")]
        ]
    # –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    elif language == 'ru':
        keyboard = [
            [InlineKeyboardButton("üìù –ü—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏", callback_data="mindfulness_path")],
            [InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è –ú–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è", callback_data="meditation")],
            [InlineKeyboardButton("‚ú® –ò—Å–∫—Ä–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏", callback_data="get_motivation")],
            [InlineKeyboardButton("üìì –î–Ω–µ–≤–Ω–∏–∫ –º—ã—Å–ª–µ–π", callback_data="start_journal")],
            [InlineKeyboardButton("üìã –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", callback_data="productivity_checklist")],
            [InlineKeyboardButton("üéÆ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="mini_games")],
            [InlineKeyboardButton("üåû –î–Ω–µ–≤–Ω—ã–µ –∏ –Ω–æ—á–Ω—ã–µ —Ä–∏—Ç—É–∞–ª—ã", callback_data="rituals")],
            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º", callback_data="share_mood")],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", callback_data="improve_mood")],
            [InlineKeyboardButton("üîÑ –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="personal_profile")],
            [InlineKeyboardButton("üåü –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã", callback_data="daily_challenges")],
            [InlineKeyboardButton("üë• –°–æ–æ–±—â–µ—Å—Ç–≤–æ", callback_data="community")],
            [InlineKeyboardButton("üåç –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="start")]
        ]
    # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    else:  # English as default
        keyboard = [
            [InlineKeyboardButton("üìù Path to Mindfulness", callback_data="mindfulness_path")],
            [InlineKeyboardButton("üßò‚Äç‚ôÇÔ∏è Meditative Harmony", callback_data="meditation")],
            [InlineKeyboardButton("‚ú® Spark of Motivation", callback_data="get_motivation")],
            [InlineKeyboardButton("üìì Thought Diary", callback_data="start_journal")],
            [InlineKeyboardButton("üìã Productivity Checklist", callback_data="productivity_checklist")],
            [InlineKeyboardButton("üéÆ Entertaining Games", callback_data="mini_games")],
            [InlineKeyboardButton("üåû Daily and Nightly Rituals", callback_data="rituals")],
            [InlineKeyboardButton("‚ù§Ô∏è Share Your Mood", callback_data="share_mood")],
            [InlineKeyboardButton("üí° Tips to Improve Mood", callback_data="improve_mood")],
            [InlineKeyboardButton("üîÑ Personal Profile", callback_data="personal_profile")],
            [InlineKeyboardButton("üåü Daily Challenges", callback_data="daily_challenges")],
            [InlineKeyboardButton("üë• Community", callback_data="community")],
            [InlineKeyboardButton("üåç Change Language", callback_data="start")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main menu:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / Main menu:", reply_markup=reply_markup)

    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ menu()")
async def get_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_motivation()")
    keyboard = [
        [InlineKeyboardButton("üìñ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –¶–∏—Ç–∞—Ç—ã", callback_data="motivational_quotes")],
        [InlineKeyboardButton("üéß –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –ú—É–∑—ã–∫–∞", callback_data="inspiring_music")],
        [InlineKeyboardButton("üé• –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –í–∏–¥–µ–æ", callback_data="inspiring_videos")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–ò—Å–∫—Ä–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_motivation()")

async def motivational_quotes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    prompt = "Generate a motivational quote."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ motivational_quotes()")

async def start_journal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è start_journal()")
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ù–æ–≤–∞—è –ó–∞–ø–∏—Å—å", callback_data="new_entry")],
        [InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –ó–∞–ø–∏—Å–µ–π", callback_data="view_entries")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –ú—ã—Å–ª–µ–π:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_journal()")

async def new_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è new_entry()")
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–ø–∏—à—É —ç—Ç–æ –¥–ª—è –≤–∞—Å."
    )
    context.user_data["awaiting_journal"] = True
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ new_entry()")

async def save_journal_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è save_journal_entry()")
    user_id = update.message.from_user.id
    if context.user_data.get("awaiting_journal"):
        entry = update.message.text
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        context.user_data.setdefault("journal", []).append({"timestamp": timestamp, "entry": entry})
        context.user_data["awaiting_journal"] = False
        save_user_data(user_id, context.user_data)  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.message.reply_text("–í–∞—à–∏ –º—ã—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üí°")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ save_journal_entry()")

async def view_entries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è view_entries()")
    user_id = update.callback_query.from_user.id
    user_data = load_user_data(user_id)  # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    journal_entries = user_data.get("journal", [])
    if journal_entries:
        entries_text = "\n".join([f"{entry['timestamp']}: {entry['entry']}" for entry in journal_entries])
        await update.callback_query.message.reply_text(f"–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{entries_text}")
    else:
        await update.callback_query.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ view_entries()")

async def post_to_channel(bot: Bot, channel_id: str, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª.

    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
        channel_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    await bot.send_message(chat_id=channel_id, text=message)
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# async def get_channel_updates(bot: Bot, channel_id: str):
#     """
#     –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞.
#
#     Args:
#         bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
#         channel_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.
#     """
#     updates = await bot.get_updates()
#     for update in updates:
#         if update.channel_post:
#             logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {update.channel_post.text}")
async def get_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –º–æ—Ç–∏–≤–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ get_motivation()")
    keyboard = [
        [InlineKeyboardButton("üìñ –ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ –¶–∏—Ç–∞—Ç—ã", callback_data="motivational_quotes")],
        [InlineKeyboardButton("üéß –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∞—è –ú—É–∑—ã–∫–∞", callback_data="inspiring_music")],
        [InlineKeyboardButton("üé• –í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –í–∏–¥–µ–æ", callback_data="inspiring_videos")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–ò—Å–∫—Ä–∞ –ú–æ—Ç–∏–≤–∞—Ü–∏–∏:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_motivation()")

async def motivational_quotes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–π —Ü–∏—Ç–∞—Ç—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    prompt = "Generate a motivational quote."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–ú–æ—Ç–∏–≤–∏—Ä—É—é—â–∞—è —Ü–∏—Ç–∞—Ç–∞: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ motivational_quotes()")

async def start_journal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω–∏–∫–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è start_journal()")
    keyboard = [
        [InlineKeyboardButton("‚úçÔ∏è –ù–æ–≤–∞—è –ó–∞–ø–∏—Å—å", callback_data="new_entry")],
        [InlineKeyboardButton("üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –ó–∞–ø–∏—Å–µ–π", callback_data="view_entries")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–î–Ω–µ–≤–Ω–∏–∫ –ú—ã—Å–ª–µ–π:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ start_journal()")

async def new_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è new_entry()")
    await update.callback_query.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –≤–æ–ª–Ω—É–µ—Ç, –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏. –Ø –∑–∞–ø–∏—à—É —ç—Ç–æ –¥–ª—è –≤–∞—Å."
    )
    context.user_data["awaiting_journal"] = True
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ new_entry()")

async def save_journal_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è save_journal_entry()")
    user_id = update.message.from_user.id
    if context.user_data.get("awaiting_journal"):
        entry = update.message.text
        timestamp = datetime.now().strftime("%Y-%–º-%d %H:%–ú:%S")
        context.user_data.setdefault("journal", []).append({"timestamp": timestamp, "entry": entry})
        context.user_data["awaiting_journal"] = False
        save_user_data(user_id, context.user_data)
        await update.message.reply_text("–í–∞—à–∏ –º—ã—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! üí°")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ save_journal_entry()")

async def view_entries(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è view_entries()")
    user_id = update.callback_query.from_user.id
    user_data = load_user_data(user_id)
    journal_entries = user_data.get("journal", [])
    if journal_entries:
        entries_text = "\n".join([f"{entry['timestamp']}: {entry['entry']}" for entry in journal_entries])
        await update.callback_query.message.reply_text(f"–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n{entries_text}")
    else:
        await update.callback_query.message.reply_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ view_entries()")

async def post_to_channel(bot: Bot, channel_id: str, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª.

    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
        channel_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.
        message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    await bot.send_message(chat_id=channel_id, text=message)
    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
async def get_channel_updates(bot: Bot, channel_id: str):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∫–∞–Ω–∞–ª–∞.

    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram.
        channel_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞.
    """
    updates = await bot.get_updates()
    for update in updates:
        if update.channel_post:
            logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {update.channel_post.text}")
async def ocean_sounds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ —Å–æ –∑–≤—É–∫–∞–º–∏ –æ–∫–µ–∞–Ω–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è ocean_sounds()")
    await update.callback_query.message.reply_text("–ù–∞—á–∏–Ω–∞–µ–º –º–µ–¥–∏—Ç–∞—Ü–∏—é —Å–æ –∑–≤—É–∫–∞–º–∏ –æ–∫–µ–∞–Ω–∞...")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ocean_sounds()")

async def personalized_sessions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è personalized_sessions()")
    user_id = update.callback_query.from_user.id
    user_data = load_user_data(user_id)
    preferences = user_data.get("meditation_preferences", "–æ–±—â–∏–µ")
    prompt = "Guide through a meditation session for high stress levels." if preferences == "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞" else "Guide through a general meditation session."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ personalized_sessions()")

async def productivity_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —á–µ–∫-–ª–∏—Å—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è productivity_checklist()")
    keyboard = [
        [InlineKeyboardButton("üåü –°–æ–∑–¥–∞—Ç—å –ù–æ–≤—ã–π –ß–µ–∫-–ª–∏—Å—Ç", callback_data="create_checklist")],
        [InlineKeyboardButton("‚úÖ –ú–æ–∏ –ß–µ–∫-–ª–∏—Å—Ç—ã", callback_data="my_checklists")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–ß–µ–∫-–ª–∏—Å—Ç –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ productivity_checklist()")

async def create_checklist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è create_checklist()")
    await update.callback_query.message.reply_text("–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ–∫-–ª–∏—Å—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á –∏ –Ω–∞–∂–º–∏—Ç–µ Enter.")
    context.user_data["awaiting_checklist"] = True
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ create_checklist()")

async def my_checklists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è my_checklists()")
    user_id = update.callback_query.from_user.id
    user_data = load_user_data(user_id)
    checklists = user_data.get("checklists", [])
    if checklists:
        checklists_text = "\n".join([f"{i+1}. {checklist}" for i, checklist in enumerate(checklists)])
        await update.callback_query.message.reply_text(f"–í–∞—à–∏ —á–µ–∫-–ª–∏—Å—Ç—ã:\n{checklists_text}")
    else:
        await update.callback_query.message.reply_text("–ù–µ—Ç —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ my_checklists()")

async def save_checklist_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —á–µ–∫-–ª–∏—Å—Ç–µ.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è save_checklist_entry()")
    user_id = update.message.from_user.id
    if context.user_data.get("awaiting_checklist"):
        checklist = update.message.text
        context.user_data.setdefault("checklists", []).append(checklist)
        context.user_data["awaiting_checklist"] = False
        save_user_data(user_id, context.user_data)
        await update.message.reply_text("–ß–µ–∫-–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! üí°")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ save_checklist_entry()")

async def mini_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è mini_games()")
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è", callback_data="game_find_differences")],
        [InlineKeyboardButton("üéØ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–≥—Ä–∞", callback_data="game_attention")],
        [InlineKeyboardButton("üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ò–≥—Ä—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ mini_games()")

async def game_find_differences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è".

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_find_differences()")
    await update.callback_query.message.reply_text("–ù–∞—á–Ω–µ–º –∏–≥—Ä—É '–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è'. üîç")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_find_differences()")

async def game_attention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_attention()")
    await update.callback_query.message.reply_text("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_attention()")

async def game_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_quiz()")
    prompt = "Generate a quiz question."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_quiz()")
async def rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–æ—á–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è rituals()")
    keyboard = [
        [InlineKeyboardButton("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="morning_rituals")],
        [InlineKeyboardButton("üåú –í–µ—á–µ—Ä–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="evening_rituals")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ rituals()")

async def morning_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_rituals()")
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="morning_exercises")],
        [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="morning_meditation")],
        [InlineKeyboardButton("ü•£ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")],
        [InlineKeyboardButton("üîÑ –î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã", callback_data="rituals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_rituals()")

async def morning_exercises(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_exercises()")
    prompt = "Generate morning exercises."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–∞: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_exercises()")

async def morning_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_meditation()")
    prompt = "Guide me through a morning meditation."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_meditation()")

async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è breakfast()")
    prompt = "Recommend a healthy breakfast."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ breakfast()")

async def evening_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_rituals()")
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è –î–Ω—è", callback_data="evening_reflection")],
        [InlineKeyboardButton("üìö –ß—Ç–µ–Ω–∏–µ", callback_data="evening_reading")],
        [InlineKeyboardButton("üõå –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ü–µ—Ä–µ–¥ –°–Ω–æ–º", callback_data="evening_meditation")],
        [InlineKeyboardButton("üîÑ –î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã", callback_data="rituals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–í–µ—á–µ—Ä–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_rituals()")

async def evening_reflection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_reflection()")
    prompt = "Guide me through an evening reflection."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_reflection()")

async def evening_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_reading()")
    await update.callback_query.message.reply_text("–ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. üìö")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_reading()")

async def evening_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_meditation()")
    prompt = "Guide me through a bedtime meditation."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_meditation()")

async def personal_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è personal_profile()")
    keyboard = [
        [InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ú–µ–¥–∏—Ç–∞—Ü–∏–π", callback_data="meditation_progress")],
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –£—Ä–æ–≤–Ω–∏", callback_data="achievements_levels")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü—Ä–æ—Ñ–∏–ª—è", callback_data="profile_settings")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–õ–∏—á–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ personal_profile()")

async def meditation_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è meditation_progress()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –º–µ–¥–∏—Ç–∞—Ü–∏—è—Ö. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ meditation_progress()")

async def achievements_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è achievements_levels()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏. üèÜ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ achievements_levels()")

async def profile_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è profile_settings()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. ‚öôÔ∏è")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ profile_settings()")
async def game_find_differences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è".

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_find_differences()")
    await update.callback_query.message.reply_text("–ù–∞—á–Ω–µ–º –∏–≥—Ä—É '–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è'. üîç")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_find_differences()")

async def game_attention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_attention()")
    await update.callback_query.message.reply_text("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_attention()")

async def game_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_quiz()")
    prompt = "Generate a quiz question."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_quiz()")

async def rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–æ—á–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è rituals()")
    keyboard = [
        [InlineKeyboardButton("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="morning_rituals")],
        [InlineKeyboardButton("üåú –í–µ—á–µ—Ä–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="evening_rituals")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ rituals()")

async def morning_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_rituals()")
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="morning_exercises")],
        [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="morning_meditation")],
        [InlineKeyboardButton("ü•£ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")],
        [InlineKeyboardButton("üîÑ –î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã", callback_data="rituals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_rituals()")

async def morning_exercises(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_exercises()")
    prompt = "Generate morning exercises."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–∞: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_exercises()")

async def morning_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–µ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_meditation()")
    prompt = "Guide me through a morning meditation."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–£—Ç—Ä–µ–Ω–Ω—è—è –º–µ–¥–∏—Ç–∞—Ü–∏—è: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_meditation()")

async def breakfast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è breakfast()")
    prompt = "Recommend a healthy breakfast."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞–∫: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ breakfast()")

async def evening_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_rituals()")
    keyboard = [
        [InlineKeyboardButton("üìù –†–µ—Ñ–ª–µ–∫—Å–∏—è –î–Ω—è", callback_data="evening_reflection")],
        [InlineKeyboardButton("üìö –ß—Ç–µ–Ω–∏–µ", callback_data="evening_reading")],
        [InlineKeyboardButton("üõå –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ü–µ—Ä–µ–¥ –°–Ω–æ–º", callback_data="evening_meditation")],
        [InlineKeyboardButton("üîÑ –î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã", callback_data="rituals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–í–µ—á–µ—Ä–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_rituals()")

async def evening_reflection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –≤–µ—á–µ—Ä–Ω–µ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_reflection()")
    prompt = "Guide me through an evening reflection."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–†–µ—Ñ–ª–µ–∫—Å–∏—è –¥–Ω—è: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_reflection()")

async def evening_reading(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_reading()")
    await update.callback_query.message.reply_text("–ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º. üìö")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_reading()")

async def evening_meditation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è evening_meditation()")
    prompt = "Guide me through a bedtime meditation."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ evening_meditation()")
async def personal_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è personal_profile()")
    keyboard = [
        [InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ú–µ–¥–∏—Ç–∞—Ü–∏–π", callback_data="meditation_progress")],
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –£—Ä–æ–≤–Ω–∏", callback_data="achievements_levels")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü—Ä–æ—Ñ–∏–ª—è", callback_data="profile_settings")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–õ–∏—á–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ personal_profile()")

async def meditation_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è meditation_progress()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –º–µ–¥–∏—Ç–∞—Ü–∏—è—Ö. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ meditation_progress()")

async def achievements_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è achievements_levels()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏. üèÜ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ achievements_levels()")

async def profile_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è profile_settings()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. ‚öôÔ∏è")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ profile_settings()")
async def personal_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è personal_profile()")
    keyboard = [
        [InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –ú–µ–¥–∏—Ç–∞—Ü–∏–π", callback_data="meditation_progress")],
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –£—Ä–æ–≤–Ω–∏", callback_data="achievements_levels")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ü—Ä–æ—Ñ–∏–ª—è", callback_data="profile_settings")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–õ–∏—á–Ω—ã–π –ü—Ä–æ—Ñ–∏–ª—å:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ personal_profile()")

async def meditation_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è meditation_progress()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –º–µ–¥–∏—Ç–∞—Ü–∏—è—Ö. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ meditation_progress()")

async def achievements_levels(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ —É—Ä–æ–≤–Ω–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è achievements_levels()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —É—Ä–æ–≤–Ω–∏. üèÜ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ achievements_levels()")

async def profile_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è profile_settings()")
    await update.callback_query.message.reply_text("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. ‚öôÔ∏è")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ profile_settings()")

async def mini_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –º–∏–Ω–∏-–∏–≥—Ä.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è mini_games()")
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è", callback_data="game_find_differences")],
        [InlineKeyboardButton("üéØ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–≥—Ä–∞", callback_data="game_attention")],
        [InlineKeyboardButton("üß© –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –ò–≥—Ä—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ mini_games()")

async def game_find_differences(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã "–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è".

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_find_differences()")
    await update.callback_query.message.reply_text("–ù–∞—á–Ω–µ–º –∏–≥—Ä—É '–ù–∞–π–¥–∏ –†–∞–∑–ª–∏—á–∏—è'. üîç")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_find_differences()")

async def game_attention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–π –∏–≥—Ä—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_attention()")
    await update.callback_query.message.reply_text("–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å. üéØ")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_attention()")

async def game_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è game_quiz()")
    prompt = "Generate a quiz question."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–í–æ–ø—Ä–æ—Å –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ game_quiz()")

async def rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–Ω–µ–≤–Ω—ã—Ö –∏ –Ω–æ—á–Ω—ã—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è rituals()")
    keyboard = [
        [InlineKeyboardButton("‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="morning_rituals")],
        [InlineKeyboardButton("üåú –í–µ—á–µ—Ä–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã", callback_data="evening_rituals")],
        [InlineKeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ rituals()")

async def morning_rituals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∏—Ç—É–∞–ª–æ–≤.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_rituals()")
    keyboard = [
        [InlineKeyboardButton("üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data="morning_exercises")],
        [InlineKeyboardButton("üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è", callback_data="morning_meditation")],
        [InlineKeyboardButton("ü•£ –ó–∞–≤—Ç—Ä–∞–∫", callback_data="breakfast")],
        [InlineKeyboardButton("üîÑ –î–Ω–µ–≤–Ω—ã–µ –∏ –ù–æ—á–Ω—ã–µ –†–∏—Ç—É–∞–ª—ã", callback_data="rituals")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–£—Ç—Ä–µ–Ω–Ω–∏–µ –†–∏—Ç—É–∞–ª—ã:", reply_markup=reply_markup)
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_rituals()")

async def morning_exercises(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è morning_exercises()")
    prompt = "Generate morning exercises."
    generated_text = generate_text(prompt)
    await update.callback_query.message.reply_text(f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É—Ç—Ä–∞: {generated_text}")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ morning_exercises()")
async def inspiring_stories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è inspiring_stories()")
    await update.callback_query.message.reply_text("–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. üí¨")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ inspiring_stories()")

async def inspiring_stories(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏—Ö –∏—Å—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è inspiring_stories()")
    await update.callback_query.message.reply_text("–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. üí¨")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ inspiring_stories()")

async def comments_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

    Args:
        update (Update): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram.
        context (ContextTypes.DEFAULT_TYPE): –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    logging.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è comments_reviews()")
    await update.callback_query.message.reply_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –æ—Ç–∑—ã–≤—ã. üó®Ô∏è")
    logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ comments_reviews()")

# –ü–æ–ª–Ω—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (main.py)
"""
AI Assistant Bot for Mindfulness and Productivity.

This module provides a chatbot that helps users with mindfulness and productivity tasks.
The bot can generate motivational quotes, help with journaling, and provide mindfulness tips.
"""

import logging
import asyncio
import nest_asyncio
from telegram import BotCommand
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters
from functions import (
    start, menu, set_language_uk, set_language_ru, set_language_en, mindfulness_path, self_assessment, my_results,
    mindfulness_tips, meditation, short_sessions, meditate_5, meditate_10, meditate_20, atmosphere_meditations,
    rain_sounds, forest_sounds, ocean_sounds, personalized_sessions, get_motivation, motivational_quotes, inspiring_music,
    inspiring_videos, start_journal, new_entry, view_entries, save_journal_entry, productivity_checklist, create_checklist,
    my_checklists, save_checklist_entry, mini_games, game_find_differences, game_attention, game_quiz, rituals,
    morning_rituals, morning_exercises, morning_meditation, breakfast, evening_rituals, evening_reflection, evening_reading,
    evening_meditation, share_mood, improve_mood, personal_profile, meditation_progress, achievements_levels, profile_settings,
    daily_challenges, mindful_breathing, meditation_exercises, productivity_tasks, community, share_success, inspiring_stories,
    comments_reviews, update_channel
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Telegram.

    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç polling –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()")
    
    try:
        application = Application.builder().token("7700315837:AAEb-1eJbJwnEP9A6mcZrCspbTpF8fdG3cQ").build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ]
        await application.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu))
        application.add_handler(CallbackQueryHandler(set_language_uk, pattern="set_language_uk"))
        application.add_handler(CallbackQueryHandler(set_language_ru, pattern="set_language_ru"))
        application.add_handler(CallbackQueryHandler(set_language_en, pattern="set_language_en"))
        application.add_handler(CallbackQueryHandler(mindfulness_path, pattern="mindfulness_path"))
        application.add_handler(CallbackQueryHandler(self_assessment, pattern="self_assessment"))
        application.add_handler(CallbackQueryHandler(my_results, pattern="my_results"))
        application.add_handler(CallbackQueryHandler(mindfulness_tips, pattern="mindfulness_tips"))
        application.add_handler(CallbackQueryHandler(meditation, pattern="meditation"))
        application.add_handler(CallbackQueryHandler(short_sessions, pattern="short_sessions"))
        application.add_handler(CallbackQueryHandler(meditate_5, pattern="meditate_5"))
        application.add_handler(CallbackQueryHandler(meditate_10, pattern="meditate_10"))
        application.add_handler(CallbackQueryHandler(meditate_20, pattern="meditate_20"))
        application.add_handler(CallbackQueryHandler(atmosphere_meditations, pattern="atmosphere_meditations"))
        application.add_handler(CallbackQueryHandler(rain_sounds, pattern="rain_sounds"))
        application.add_handler(CallbackQueryHandler(forest_sounds, pattern="forest_sounds"))
        application.add_handler(CallbackQueryHandler(ocean_sounds, pattern="ocean_sounds"))
        application.add_handler(CallbackQueryHandler(personalized_sessions, pattern="personalized_sessions"))
        application.add_handler(CallbackQueryHandler(get_motivation, pattern="get_motivation"))
        application.add_handler(CallbackQueryHandler(motivational_quotes, pattern="motivational_quotes"))
        application.add_handler(CallbackQueryHandler(inspiring_music, pattern="inspiring_music"))
        application.add_handler(CallbackQueryHandler(inspiring_videos, pattern="inspiring_videos"))
        application.add_handler(CallbackQueryHandler(start_journal, pattern="start_journal"))
        application.add_handler(CallbackQueryHandler(new_entry, pattern="new_entry"))
        application.add_handler(CallbackQueryHandler(view_entries, pattern="view_entries"))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_journal_entry))
        application.add_handler(CallbackQueryHandler(productivity_checklist, pattern="productivity_checklist"))
        application.add_handler(CallbackQueryHandler(create_checklist, pattern="create_checklist"))
        application.add_handler(CallbackQueryHandler(my_checklists, pattern="my_checklists"))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_checklist_entry))
        application.add_handler(CallbackQueryHandler(mini_games, pattern="mini_games"))
        application.add_handler(CallbackQueryHandler(game_find_differences, pattern="game_find_differences"))
        application.add_handler(CallbackQueryHandler(game_attention, pattern="game_attention"))
        application.add_handler(CallbackQueryHandler(game_quiz, pattern="game_quiz"))
        application.add_handler(CallbackQueryHandler(rituals, pattern="rituals"))
        application.add_handler(CallbackQueryHandler(morning_rituals, pattern="morning_rituals"))
        application.add_handler(CallbackQueryHandler(morning_exercises, pattern="morning_exercises"))
        application.add_handler(CallbackQueryHandler(morning_meditation, pattern="morning_meditation"))
        application.add_handler(CallbackQueryHandler(breakfast, pattern="breakfast"))
        application.add_handler(CallbackQueryHandler(evening_rituals, pattern="evening_rituals"))
        application.add_handler(CallbackQueryHandler(evening_reflection, pattern="evening_reflection"))
        application.add_handler(CallbackQueryHandler(evening_reading, pattern="evening_reading"))
        application.add_handler(CallbackQueryHandler(evening_meditation, pattern="evening_meditation"))
        application.add_handler(CallbackQueryHandler(share_mood, pattern="share_mood"))
        application.add_handler(CallbackQueryHandler(improve_mood, pattern="improve_mood"))
        application.add_handler(CallbackQueryHandler(personal_profile, pattern="personal_profile"))
        application.add_handler(CallbackQueryHandler(meditation_progress, pattern="meditation_progress"))
        application.add_handler(CallbackQueryHandler(achievements_levels, pattern="achievements_levels"))
        application.add_handler(CallbackQueryHandler(profile_settings, pattern="profile_settings"))
        application.add_handler(CallbackQueryHandler(daily_challenges, pattern="daily_challenges"))
        application.add_handler(CallbackQueryHandler(mindful_breathing, pattern="mindful_breathing"))
        application.add_handler(CallbackQueryHandler(meditation_exercises, pattern="meditation_exercises"))
        application.add_handler(CallbackQueryHandler(productivity_tasks, pattern="productivity_tasks"))
        application.add_handler(CallbackQueryHandler(community, pattern="community"))
        application.add_handler(CallbackQueryHandler(share_success, pattern="share_success"))
        application.add_handler(CallbackQueryHandler(inspiring_stories, pattern="inspiring_stories"))
        application.add_handler(CallbackQueryHandler(comments_reviews, pattern="comments_reviews"))
        application.add_handler(CallbackQueryHandler(update_channel, pattern="update_channel"))
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ polling")
        await application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()")

if __name__ == "__main__":
    logger.info("–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º nest_asyncio –∏ –∑–∞–ø—É—Å–∫–∞–µ–º main()")
    nest_asyncio.apply()
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {e}", exc_info=True)

# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

application.add_handler(CommandHandler("test", test_command))
